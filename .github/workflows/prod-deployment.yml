name: Prod Deployment

on:
  workflow_dispatch:

jobs:
  Prod-Deployment:
    name: Production Deployment
    runs-on: ubuntu-22.04
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read # This is required for actions/checkout@v2

    env:
      CONFIG_ENV: ${{ secrets.CONFIG_ENV }}
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      PUB_REGISTRY: public.ecr.aws/x6v6j9u1
      CONTAINER_IMAGE_NAME: vlecture-api
      AWS_REGION: us-west-2
      IMAGE_TAG: ${{ github.sha }}
    
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v4

      # us-east-1 for Container Registry
      - name: Configure AWS Credentials 
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-duration-seconds: 1200
          role-session-name: GithubConfigAWSCreds
          role-skip-session-tagging: true
      
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public
      # sudo aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
      - name: Build, tag, and push image to AWS ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REGISTRY_ALIAS: x6v6j9u1
          ECR_REPOSITORY: vlecture-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          
          docker build -t $ECR_REGISTRY/$REGISTRY_ALIAS/$ECR_REPOSITORY:${{ env.IMAGE_TAG }} .
          docker tag "$ECR_REGISTRY/$REGISTRY_ALIAS/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}" "$ECR_REGISTRY/$REGISTRY_ALIAS/$ECR_REPOSITORY:latest"

          docker push $ECR_REGISTRY/$REGISTRY_ALIAS/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}
          docker push $ECR_REGISTRY/$REGISTRY_ALIAS/$ECR_REPOSITORY:latest
        
      # us-west-2 for running container on VM
      - name: Configure AWS Credentials 2
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-duration-seconds: 1200
          role-session-name: GithubConfigAWSCreds
          role-skip-session-tagging: true
        
      - name: Pull latest image from ECR and run container
        uses: appleboy/ssh-action@v0.1.9
        env:
          ECR_REGISTRY: ${{ env.PUB_REGISTRY }}
          ECR_REPOSITORY: vlecture-api
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATEKEY }}
          port: ${{ secrets.SSH_PORT }}
          debug: true
          envs: CONFIG_ENV,AWS_SECRET_ACCESS_KEY,AWS_ACCESS_KEY_ID,ECR_REGISTRY,ECR_REPOSITORY
          script: |
            mkdir -pv ./app
            cd ./app
            echo $CONFIG_ENV | tr ' ' '\n' > .env

            sudo apt-get update
            sudo aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

            sudo docker stop ${{ env.CONTAINER_IMAGE_NAME }} || true
            sudo docker rm -f ${{ env.CONTAINER_IMAGE_NAME }} || true

            sudo docker rmi -f ${{ env.ECR_REGISTRY }}/${{ env.CONTAINER_IMAGE_NAME }}:latest || true
            sudo docker pull "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest"
            
            sudo docker run -d --name ${{ env.CONTAINER_IMAGE_NAME }} \
              --restart always \
              -v "$(pwd)/.env:/app/.env:ro" \
              -p "8080:8080" \
              "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest"